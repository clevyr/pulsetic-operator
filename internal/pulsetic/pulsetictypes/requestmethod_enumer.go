// Code generated by "enumer -type RequestMethod -trimprefix Method -json -text"; DO NOT EDIT.

package pulsetictypes

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _RequestMethodName = "GETPOSTPUTPATCHDELETEHEADOPTIONS"

var _RequestMethodIndex = [...]uint8{0, 3, 7, 10, 15, 21, 25, 32}

const _RequestMethodLowerName = "getpostputpatchdeleteheadoptions"

func (i RequestMethod) String() string {
	if i >= RequestMethod(len(_RequestMethodIndex)-1) {
		return fmt.Sprintf("RequestMethod(%d)", i)
	}
	return _RequestMethodName[_RequestMethodIndex[i]:_RequestMethodIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RequestMethodNoOp() {
	var x [1]struct{}
	_ = x[MethodGET-(0)]
	_ = x[MethodPOST-(1)]
	_ = x[MethodPUT-(2)]
	_ = x[MethodPATCH-(3)]
	_ = x[MethodDELETE-(4)]
	_ = x[MethodHEAD-(5)]
	_ = x[MethodOPTIONS-(6)]
}

var _RequestMethodValues = []RequestMethod{MethodGET, MethodPOST, MethodPUT, MethodPATCH, MethodDELETE, MethodHEAD, MethodOPTIONS}

var _RequestMethodNameToValueMap = map[string]RequestMethod{
	_RequestMethodName[0:3]:        MethodGET,
	_RequestMethodLowerName[0:3]:   MethodGET,
	_RequestMethodName[3:7]:        MethodPOST,
	_RequestMethodLowerName[3:7]:   MethodPOST,
	_RequestMethodName[7:10]:       MethodPUT,
	_RequestMethodLowerName[7:10]:  MethodPUT,
	_RequestMethodName[10:15]:      MethodPATCH,
	_RequestMethodLowerName[10:15]: MethodPATCH,
	_RequestMethodName[15:21]:      MethodDELETE,
	_RequestMethodLowerName[15:21]: MethodDELETE,
	_RequestMethodName[21:25]:      MethodHEAD,
	_RequestMethodLowerName[21:25]: MethodHEAD,
	_RequestMethodName[25:32]:      MethodOPTIONS,
	_RequestMethodLowerName[25:32]: MethodOPTIONS,
}

var _RequestMethodNames = []string{
	_RequestMethodName[0:3],
	_RequestMethodName[3:7],
	_RequestMethodName[7:10],
	_RequestMethodName[10:15],
	_RequestMethodName[15:21],
	_RequestMethodName[21:25],
	_RequestMethodName[25:32],
}

// RequestMethodString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RequestMethodString(s string) (RequestMethod, error) {
	if val, ok := _RequestMethodNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RequestMethodNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RequestMethod values", s)
}

// RequestMethodValues returns all values of the enum
func RequestMethodValues() []RequestMethod {
	return _RequestMethodValues
}

// RequestMethodStrings returns a slice of all String values of the enum
func RequestMethodStrings() []string {
	strs := make([]string, len(_RequestMethodNames))
	copy(strs, _RequestMethodNames)
	return strs
}

// IsARequestMethod returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RequestMethod) IsARequestMethod() bool {
	for _, v := range _RequestMethodValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for RequestMethod
func (i RequestMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for RequestMethod
func (i *RequestMethod) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("RequestMethod should be a string, got %s", data)
	}

	var err error
	*i, err = RequestMethodString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for RequestMethod
func (i RequestMethod) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for RequestMethod
func (i *RequestMethod) UnmarshalText(text []byte) error {
	var err error
	*i, err = RequestMethodString(string(text))
	return err
}
